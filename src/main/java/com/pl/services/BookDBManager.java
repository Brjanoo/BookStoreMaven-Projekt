package com.pl.services;

import java.io.IOException;
import java.sql.*;
import java.util.*;

import com.pl.projectfiles.*;

public class BookDBManager {

	private Connection conn;
	private Statement stmt;
	private PreparedStatement addBookStmt;
	private PreparedStatement getBookStmt;
	private PreparedStatement deleteAllBookStmt;
	private PreparedStatement searchBookByTitleStmt;
	private PreparedStatement searchBookByBookTypeStmt;
	private PreparedStatement deleteBookStmt;

	
	public BookDBManager() {
		
		Properties props = new Properties();
		try {
			
			try {	
				props.load(ClassLoader.getSystemResourceAsStream("jdbc.properties"));
			} catch (IOException e) {
				e.printStackTrace();
			}		

		
			conn = DriverManager.getConnection(props.getProperty("url"));
			stmt = conn.createStatement();
			boolean bookTableExists = false;

			ResultSet rs = conn.getMetaData().getTables(null, null, null, null);

			while(rs.next()) {
				if("book".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					bookTableExists = true;
					break;
				}
			}


			if(!bookTableExists) {
				stmt.executeUpdate("" +
						"CREATE TABLE manga(" +
						"id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY," +
						"title varchar(36)," +
						"price int," +
						"booktype varchar(36)" +
						")");
			}

			addBookStmt = conn.prepareStatement("" +
					"INSERT INTO book (title, price, booktype) VALUES (?, ?, ?)" +
					"");

			getBookStmt = conn.prepareStatement("" +
					"SELECT * FROM book" +
					"");

			deleteAllBookStmt = conn.prepareStatement("" +
					"DELETE FROM book" +
					"");

			searchBookByTitleStmt = conn.prepareStatement("" +
					"SELECT id FROM book WHERE title = ?" +
					"");

			searchBookByBookTypeStmt = conn.prepareStatement("" +
					"SELECT id FROM book WHERE booktype = ?" +
					"");

			deleteBookStmt = conn.prepareStatement("" +
					"DELETE FROM book WHERE id = ?" +
					"");
			


		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public Connection getConnection() {
		return conn;
	}		
	
	public void addBook(Book book) {
		try {
			addBookStmt.setString(1, book.getTitle());
			addBookStmt.setInt(2, book.getPrice());
			addBookStmt.setString(3, book.getBookType().toString());
			addBookStmt.executeUpdate();

		} catch (SQLException e) {

			e.printStackTrace();
		}

	}

	public List<Book> getAllBooks() {
		List<Book> books = new ArrayList<Book>();

		try {
			ResultSet rs = getBookStmt.executeQuery();

			while(rs.next()) {
				
				if(rs.getString("booktype").equalsIgnoreCase("horror"))
					books.add(new Book(rs.getString("title"), rs.getInt("price"),BookType.Horror));
				else if(rs.getString("booktype").equalsIgnoreCase("biography"))
					books.add(new Book(rs.getString("title"), rs.getInt("price"),BookType.Biography));
				else if(rs.getString("booktype").equalsIgnoreCase("criminal"))
					books.add(new Book(rs.getString("title"), rs.getInt("price"),BookType.Criminal));
				
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}

		return books;
	}
	
	public void deleteAllBooks() {
		try {
			deleteAllBookStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public List<Integer> searchBookByTitle (String title)
	{
		try {
			List<Integer> result = new ArrayList<Integer>();
			searchBookByTitleStmt.setString(1, title);
			
			ResultSet rs = searchBookByTitleStmt.executeQuery();
			while (rs.next())
				result.add(rs.getInt("ID"));
			return result;
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return null;
	}

	public List<Integer> searchBookByBookType (BookType booktype)
	{
		try 
		{
			List<Integer> result = new ArrayList<Integer>();
			searchBookByBookTypeStmt.setString(1, booktype.toString());
			
			ResultSet rs = searchBookByBookTypeStmt.executeQuery();
			while (rs.next())
				result.add(rs.getInt("ID"));
			return result;
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return null;
	}	
	
	public void deleteBook(List<Integer> list)
	{
		try {
			for (Integer id : list) {
				deleteBookStmt.setInt(1, id);
				deleteBookStmt.executeUpdate();
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	
	public void printBookWithCondition(List<Book> listBook, Condition condition) {
		for (Book book : listBook) {
			if (condition.getCondition(book)) {
				System.out.println("Title: " + book.getTitle() + "\tBookType: "
								+ book.getBookType() + "\tPrice: "
								+ book.getPrice());
			}
		}
	}

}